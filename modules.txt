The navigation system for this project contains multiple modules that work together to provide users with a comprehensive mapping and navigation experience. The description of these module is as follows.

The mapError module provides a char* type error message string array, which includes corresponding strings for each error. To help users solve various problems that may occur during the map data processing (such as file not found error, format error, data out of bounds, illegal user input, etc.).

The mapAdjList module is used for storing the information of nodes and edges in a map, and it uses the adjacency list data structure. The module includes functions to initialize the adjacency list, add nodes to the list, add edges to the list, print the adjacency list(make sure get right adj list), and release memory. Additionally, we can also use this module to store the properties of edges (e.g. speed limits). The mapAdjList module is a fundamental and core module for managing map data and providing the data structures needed for path calculation in the pathFinder module.

The hashTable module is used for efficient storage and look-up of points and edges in an adjacency list by defining a hash table data structure that maps the ID of a point or edge to its corresponding index. The module provides basic functions such as initializing the hash table, adding key-value pairs, searching for specific keys and releasing the memory used. Using a hash table can significantly improve search efficiency and performance, particularly when dealing with large amounts of points and edges.

The mapReader module reads and parses data files containing map and building information. It provides the parsed data to other modules in the navigation system, such as pathFinder, mapAdjList, and mapVisualizer. The module converts raw data into internal data structures and offers an interface for communication with other modules. The mapVisualizer module needs access to data structures from the mapReader module to display the map visually. The mapReader module is essential in providing necessary data support for the entire navigation system.

The mapEditor module enables users to modify the map by adding, deleting or changing paths, nodes, and their properties. It utilizes the data structures created by the mapAdjList module for editing and storage purposes. Its goal is to provide flexibility in creating custom maps. Once the user has finished editing, the updated map can be shown in real-time using the mapVisualizer module. The mapEditor module is a vital part of a mapping and navigation system, which allows users to create and customize their own maps.

The pathFinder module utilizes the Dijkstra algorithm to calculate the optimal path between two points. Users can choose to compute the shortest path, the fastest path, or the shortest path that meets certain constraints. The module searches for the optimal path using the data structures created by the mapAdjList module and returns the computed path to the user. The pathFinder module is a core feature of the application, providing navigation capabilities for customized maps.

The pathVisualizer module displays map nodes, edges, and properties in real-time using a graphical library. It helps users interact with the data and explore it visually. After the pathFinder module calculates the best route between two points, the pathVisualizer module displays it on the map to give users a better understanding of the calculated route. Its main purpose is to provide an easy-to-use interface for viewing and exploring custom maps.
